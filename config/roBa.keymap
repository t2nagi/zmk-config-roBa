#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 120    // default: 10
#define ENCODER_SENSOR_SCRL_VAL 180
#define TAPPING_TERM_MS 500   // タップとホールドの時間制限を500msに設定

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_ZKHK  GRAVE        // Zenkaku ↔ Hankaku ↔ Kanji (半角 ↔ 全角 ↔ 漢字)
#define JP_MINUS MINUS        // -
#define JP_CARET EQUAL        // ^
#define JP_YEN   INT3         // ¥
#define JP_AT    LBKT         // @
#define JP_LBKT  RBKT         // [
#define JP_EISU  CAPS         // Eisū (英数)
#define JP_SEMI  SEMI         // ;
#define JP_COLON SQT          // :
#define JP_RBKT  NUHS         // ]
#define JP_COMMA COMMA        // ,
#define JP_DOT   DOT          // .
#define JP_SLASH SLASH        // /
#define JP_BSLH  LA(INT3)     // \(backslash)
#define JP_MHEN  INT5         // Muhenkan (無変換)
#define JP_HENK  INT4         // Henkan (変換)
#define JP_KANA  INT2         // Katakana ↔ Hiragana ↔ Rōmaji (カタカナ ↔ ひらがな ↔ ローマ字)
#define JP_EXCL  LS(N1)       // !
#define JP_DQT   LS(N2)       // "
#define JP_HASH  LS(N3)       // #
#define JP_DLLR  LS(N4)       // $
#define JP_PRCNT LS(N5)       // %
#define JP_AMPS  LS(N6)       // &
#define JP_SQT   LS(N7)       // '
#define JP_LPAR  LS(N8)       // (
#define JP_RPAR  LS(N9)       // )
#define JP_EQUAL LS(JP_MINUS) // =
#define JP_TILDE LS(JP_CARET) // ~
#define JP_PIPE  LS(JP_YEN)   // |
#define JP_GRAVE LS(JP_AT)    // `
#define JP_LBRC  LS(JP_LBKT)  // {
#define JP_CAPS  LS(JP_EISU)  // Caps Lock
#define JP_PLUS  LS(JP_SEMI)  // +
#define JP_ASTRK LS(JP_COLON) // *
#define JP_RBRC  LS(JP_RBKT)  // }
#define JP_LT    LS(JP_COMMA) // <
#define JP_RT    LS(JP_DOT)   // >
#define JP_QMARK LS(JP_SLASH) // ?
#define JP_UNDER LS(JP_BSLH)  // _

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define SCRL_UP MOVE_Y(ZMK_POINTING_DEFAULT_SCRL_VAL)
#define SCRL_DOWN MOVE_Y(-ZMK_POINTING_DEFAULT_SCRL_VAL)
#define SCRL_LEFT MOVE_X(ZMK_POINTING_DEFAULT_SCRL_VAL)
#define SCRL_RIGHT MOVE_X(-ZMK_POINTING_DEFAULT_SCRL_VAL)
#define ENCODER_SENSOR_UP MOVE_Y(ENCODER_SENSOR_SCRL_VAL)
#define ENCODER_SENSOR_DOWN MOVE_Y(-ENCODER_SENSOR_SCRL_VAL)

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <TAPPING_TERM_MS>;
};

&trackball {
    automouse-layer = <1>;
    scroll-layers = <2>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        to_default_layer {
            bindings = <&to 0>;
            key-positions = <27 28>;
        };
    };

    macros {
        mac_screen_cupture_3: mac_screen_cupture_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp NUMBER_3>,
                <&macro_release>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp NUMBER_3>;

            label = "MAC_SCREEN_CUPTURE_3";
        };

        mac_screen_cupture_4: mac_screen_cupture_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp NUMBER_4>,
                <&macro_release>,
                <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp NUMBER_4>;

            label = "MAC_SCREEN_CUPTURE_4";
        };

        chrome_page_back: chrome_page_back {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_COMMAND &kp LEFT_ARROW>,
                <&macro_release>,
                <&kp LEFT_COMMAND &kp LEFT_ARROW>;

            label = "CHROME_PAGE_BACK";
        };

        mac_trash: mac_trash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_COMMAND &kp BSPC>,
                <&macro_release>,
                <&kp LEFT_COMMAND &kp BSPC>;

            label = "MAC_TRASH";
        };
    };

    behaviors {
        double_tap: double_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "DOUBLE_TAP";
            bindings = <&kp>, <&mo>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        encode_sensor_down_up: encode_sensor_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_SENSOR_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc ENCODER_SENSOR_UP>, <&msc ENCODER_SENSOR_DOWN>;

            tap-ms = <20>;
        };

        tap_and_hold: tap_and_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_AND_HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        encode_arrow_left_right: encode_arrow_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODE_ARROW_LEFT_RIGHT";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp Q           &kp W             &kp E     &kp R             &kp T                                                            &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A           &kp S             &kp D     &kp F             &kp G        &mkp MCLK      &trans                               &kp H      &kp J  &kp K      &kp L    &lt 2 SEMICOLON
&kp Z           &kp X             &kp C     &kp V             &kp B        &kp LALT       &kp TAB                              &kp N      &kp M  &kp COMMA  &kp DOT  &lt 6 MINUS
&kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LGUI  &lt 3 LANGUAGE_2  &lt 4 SPACE  &lt 5 TAB      &tap_and_hold LEFT_SHIFT LANGUAGE_1  &kp ENTER                             &kp UNDER
            >;

            sensor-bindings = <&encode_sensor_down_up>;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &trans             &kp LC(LEFT)  &kp LC(UP)  &kp LC(RIGHT)  &trans
&trans  &trans  &trans  &trans  &trans    &trans        &trans  &chrome_page_back  &mkp MB1      &mkp MB3    &mkp MB2       &trans
&trans  &trans  &trans  &trans  &trans    &trans        &trans  &trans             &trans        &trans      &trans         &trans
&trans  &trans  &trans  &trans  &mkp MB1  &mkp MB2      &trans  &trans                                                      &trans
            >;
        };

        mouse_scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans                          &trans             &kp LC(LEFT)  &kp LC(UP_ARROW)  &kp LC(RIGHT_ARROW)  &trans
&trans  &trans  &trans  &trans  &trans    &trans        &trans  &chrome_page_back  &mkp MB1      &mkp MB3          &mkp MB2             &trans
&trans  &trans  &trans  &trans  &trans    &trans        &trans  &trans             &trans        &trans            &trans               &trans
&trans  &trans  &trans  &trans  &mkp MB1  &mkp MB2      &trans  &trans                                                                  &trans
            >;
        };

        function_and_number {
            bindings = <
&kp NUMBER_1                  &kp N2   &kp N3  &kp N4  &kp N5                       &kp N6         &kp N7  &kp N8  &kp N9  &kp N0
&kp F1                        &kp F2   &kp F3  &kp F4  &kp F5   &trans      &trans  &kp KP_DOT     &kp N4  &kp N5  &kp N6  &kp MINUS
&tap_and_hold LEFT_SHIFT F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans      &trans  &kp LS(MINUS)  &kp N1  &kp N2  &kp N3  &kp LEFT_SHIFT
&tap_and_hold LEFT_SHIFT F11  &kp F12  &trans  &trans  &trans   &trans      &trans  &trans                                 &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp DOWN_ARROW UP_ARROW>;
        };

        allow_and_option {
            bindings = <
&kp ESC  &trans  &mac_screen_cupture_3  &mac_screen_cupture_4  &trans                            &trans     &kp LC(LEFT)  &kp LC(UP)  &kp LC(RIGHT)  &trans
&kp TAB  &trans  &mac_trash             &trans                 &trans  &trans           &trans   &kp PG_UP  &kp LEFT      &kp UP      &kp RIGHT      &trans
&trans   &trans  &trans                 &trans                 &trans  &kp JP_ZKHK      &trans   &kp PG_DN  &kp HOME      &kp DOWN    &kp END        &trans
&trans   &trans  &trans                 &trans                 &trans  &trans           &kp DEL  &kp BSPC                                            &trans
            >;

            sensor-bindings = <&encode_arrow_left_right>;
        };

        options {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(NUMBER_5)                      &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &kp JP_BSLH  &kp JP_CARET  &kp JP_YEN
&kp TAB           &kp AT_SIGN       &trans            &trans            &trans            &trans      &trans  &kp LS(NUMBER_8)  &kp LS(COMMA)     &kp JP_LBKT  &kp JP_AT     &kp JP_COLON
&kp LEFT_SHIFT    &trans            &trans            &trans            &trans            &trans      &trans  &kp LS(NUMBER_9)  &kp LS(PERIOD)    &kp JP_RBKT  &kp JP_SLASH  &trans
&trans            &trans            &trans            &trans            &trans            &trans      &trans  &kp LEFT_SHIFT                                                 &trans
            >;
        };

        setting {
            bindings = <
&trans  &trans  &trans  &trans  &trans                            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &out OUT_BLE  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &out OUT_USB  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans        &trans                                                  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
